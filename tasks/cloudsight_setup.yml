---
# Cloudsight Setup

- name: Cloudsight setup default
  command: cloudsight setup --deploy-key={{ threatstack_deploy_key | mandatory }}
  register: setup_result1
  when: not threatstack_hostname and not threatstack_policy
  args:
    creates: /opt/threatstack/cloudsight/config/.secret

- name: Cloudsight setup policy
  command: cloudsight setup --deploy-key={{ threatstack_deploy_key | mandatory }} --policy="{{ threatstack_policy}}"
  register: setup_result2
  when: threatstack_policy and not threatstack_hostname
  args:
    creates: /opt/threatstack/cloudsight/config/.secret

- name: Cloudsight setup hostname
  command: cloudsight setup --deploy-key={{ threatstack_deploy_key | mandatory }} --hostname={{ threatstack_hostname }}
  register: setup_result3
  when: threatstack_hostname and not threatstack_policy
  args:
    creates: /opt/threatstack/cloudsight/config/.secret

- name: Cloudsight setup hostname/policy
<<<<<<< Updated upstream
  command: cloudsight setup --deploy-key={{ threatstack_deploy_key | mandatory }} --policy="{{ threatstack_policy}}" --hostname={{ threatstack_hostname }}
  register: setup_result
=======
  command: cloudsight setup --deploy-key={{ threatstack_deploy_key | mandatory }} --hostname={{ threatstack_hostname }}
  register: setup_result4
>>>>>>> Stashed changes
  when: threatstack_hostname and threatstack_policy
  args:
    creates: /opt/threatstack/cloudsight/config/.secret

- name: fail the play if the previous command did not succeed
  fail: msg="Cloudsight Install Failed"
  with_items: [setup_result1.stderr, setup_result2.stderr, setup_result2.stderr, setup_result2.stderr]
  when: 'FAILED' in item

# Test
- name: Test cloudsight state
  service:
    name: cloudsight
    enabled: yes
    state: started

# - name: Test tsfim state
#   service:
#     name: tsfim
#     state: started
#
# - name: Test tsauditd state
#   service:
#     name: tsauditd
#     state: started
